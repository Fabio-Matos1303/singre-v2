name: CD

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      REGISTRY: ${{ vars.REGISTRY || 'ghcr.io' }}
      IMAGE_ORG: ${{ vars.IMAGE_ORG || github.repository_owner }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Derive tags (backend)
        id: meta_back
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_ORG }}/singre-backend
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha

      - name: Derive tags (frontend)
        id: meta_front
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_ORG }}/singre-frontend
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha

      - name: Build and push backend
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/backend/Dockerfile
          push: true
          tags: ${{ steps.meta_back.outputs.tags }}
          labels: ${{ steps.meta_back.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend (final-built)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/frontend/Dockerfile
          target: final-built
          push: true
          tags: ${{ steps.meta_front.outputs.tags }}
          labels: ${{ steps.meta_front.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Show compose.prod with resolved images
        run: |
          sed -e "s|ghcr.io/your-org|${{ env.REGISTRY }}/${{ env.IMAGE_ORG }}|g" docker-compose.prod.yml

  deploy-staging:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: ${{ (github.event_name == 'workflow_dispatch') || startsWith(github.ref, 'refs/tags/') }}
    environment: staging
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare artifacts
        run: |
          sed -e "s|ghcr.io/your-org|${{ vars.REGISTRY || 'ghcr.io' }}/${{ vars.IMAGE_ORG || github.repository_owner }}|g" docker-compose.prod.yml > docker-compose.staging.yml

      - name: Copy files to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.STAGING_SSH_HOST }}
          username: ${{ secrets.STAGING_SSH_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          source: "docker-compose.staging.yml"
          target: ${{ vars.STAGING_PATH || '/opt/singre' }}

      - name: Deploy on server
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.STAGING_SSH_HOST }}
          username: ${{ secrets.STAGING_SSH_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            set -euo pipefail
            APP_DIR=${{ vars.STAGING_PATH || '/opt/singre' }}
            mkdir -p "$APP_DIR"
            cd "$APP_DIR"
            # Create/update .env for compose.prod with required secrets
            cat > .env <<ENV
            REGISTRY=${{ vars.REGISTRY || 'ghcr.io' }}
            IMAGE_ORG=${{ vars.IMAGE_ORG || github.repository_owner }}
            BACKEND_TAG=${{ github.ref_name }}
            FRONTEND_TAG=${{ github.ref_name }}
            MYSQL_ROOT_PASSWORD=${{ secrets.STAGING_DB_ROOT_PASSWORD }}
            MYSQL_DATABASE=${{ vars.STAGING_DB_NAME || 'singre' }}
            MYSQL_USER=${{ vars.STAGING_DB_USER || 'singre' }}
            MYSQL_PASSWORD=${{ secrets.STAGING_DB_PASSWORD }}
            APP_KEY=${{ secrets.STAGING_APP_KEY }}
            ENV
            docker compose -f docker-compose.staging.yml pull
            docker compose -f docker-compose.staging.yml up -d
