version: '3.9'

services:
  mysql:
    image: mysql:8.0
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:?set}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-singre}
      MYSQL_USER: ${MYSQL_USER:-singre}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:?set}
    volumes:
      - mysql_data:/var/lib/mysql
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    restart: unless-stopped

  backend:
    image: ${REGISTRY:-ghcr.io}/${IMAGE_ORG:-your-org}/singre-backend:${BACKEND_TAG:-latest}
    depends_on:
      - mysql
      - redis
    healthcheck:
      test: ["CMD-SHELL", "bash -lc 'echo > /dev/tcp/127.0.0.1/9000' "]
      interval: 10s
      timeout: 5s
      retries: 10
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    environment:
      APP_ENV: production
      APP_DEBUG: "false"
      APP_KEY: ${APP_KEY:?set}
      DB_HOST: mysql
      DB_PORT: 3306
      DB_DATABASE: ${MYSQL_DATABASE:-singre}
      DB_USERNAME: ${MYSQL_USER:-singre}
      DB_PASSWORD: ${MYSQL_PASSWORD:?set}
      CACHE_DRIVER: redis
      QUEUE_CONNECTION: redis
      REDIS_HOST: redis
    restart: unless-stopped

  nginx:
    image: nginx:1.27-alpine
    depends_on:
      backend:
        condition: service_started
    volumes:
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./backend:/var/www/html:ro
    ports:
      - "80:80"
      - "443:443"
    healthcheck:
      test: ["CMD-SHELL", "wget -q -O /dev/null http://localhost || exit 1"]
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    restart: unless-stopped
  loki:
    image: grafana/loki:2.9.8
    command: -config.file=/etc/loki/config.yml
    ports:
      - "3100:3100"
    volumes:
      - ./docker/monitoring/loki-config.yml:/etc/loki/config.yml:ro
      - loki_data:/loki
    restart: unless-stopped

  promtail:
    image: grafana/promtail:2.9.8
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./docker/monitoring/promtail-config.yml:/etc/promtail/config.yml:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    restart: unless-stopped

  grafana:
    image: grafana/grafana:10.4.2
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/monitoring/grafana/datasources/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml:ro
    depends_on:
      - loki
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:v2.55.1
    command: --config.file=/etc/prometheus/prometheus.yml --storage.tsdb.retention.time=15d
    ports:
      - "9090:9090"
    volumes:
      - ./docker/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    restart: unless-stopped

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.50.0
    ports:
      - "8081:8080"
    volumes:
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    restart: unless-stopped

  frontend:
    image: ${REGISTRY:-ghcr.io}/${IMAGE_ORG:-your-org}/singre-frontend:${FRONTEND_TAG:-latest}
    ports:
      - "8080:80"
    healthcheck:
      test: ["CMD-SHELL", "wget -q -O /dev/null http://localhost || exit 1"]
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    restart: unless-stopped

  db_backup:
    image: alpine:3.20
    depends_on:
      - mysql
    environment:
      TZ: ${TZ:-UTC}
      MYSQL_HOST: mysql
      MYSQL_PORT: 3306
      MYSQL_DATABASE: ${MYSQL_DATABASE:-singre}
      MYSQL_USER: ${MYSQL_USER:-singre}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:?set}
      BACKUP_RETENTION_DAYS: ${BACKUP_RETENTION_DAYS:-7}
    volumes:
      - db_backups:/backups
    command: >-
      sh -lc '
        set -e;
        apk add --no-cache mysql-client tzdata;
        ln -sf /usr/share/zoneinfo/$TZ /etc/localtime || true;
        cat > /backup.sh <<EOS
        #!/bin/sh
        set -e
        TS=$(date +%Y%m%d%H%M%S)
        FILE=/backups/db-"$MYSQL_DATABASE"-"$TS".sql
        echo "[backup] dumping to $FILE";
        mysqldump -h "$MYSQL_HOST" -P "$MYSQL_PORT" -u"$MYSQL_USER" -p"$MYSQL_PASSWORD" "$MYSQL_DATABASE" > "$FILE";
        echo "[backup] pruning backups older than $BACKUP_RETENTION_DAYS days";
        find /backups -type f -name "*.sql" -mtime +"$BACKUP_RETENTION_DAYS" -delete || true;
        EOS
        chmod +x /backup.sh;
        echo "0 3 * * * /bin/sh /backup.sh" > /etc/crontabs/root;
        crond -f -l 8
      '
    restart: unless-stopped

volumes:
  mysql_data:
  db_backups:
  loki_data:
  grafana_data:
